//https://takeuforward.org/data-structure/number-of-distinct-substrings-in-a-string-using-trie/

//TC:O(N*N) SC:O(N*N)

#include <iostream>
#include <set>
#include <string>
using namespace std;

set<string> countDistinctSubstrings(const string& s)
{
    set<string> st;
    int n = s.length();
    
    for(int i = 0;i<n;i++)
    {   string str = "";
        for(int j = i;j<n;j++)
        {
            str+= s[j];
            st.insert(str);
        }
    }
    
    return st;
    
    
}

int main()
{
    //std::cout<<"Hello World";
    
    set<string> result;
    string s = "striver";
    int count = 0;
    
    result = countDistinctSubstrings(s);
    
    for(const auto& str: result)
    {
        cout<<str<< endl;
        count++;
    }
    
    cout<<"count is:"<<count+1<<endl;

    return 0;
}

O/p:
e
er
i
iv
ive
iver
r
ri
riv
rive
river
s
st
str
stri
striv
strive
striver
t
tr
tri
triv
trive
triver
v
ve
ver
count is:28

// implementation using Trie:

#include <iostream>  
#include <string>    

using namespace std;

struct Node{
    Node* link[26];
    bool flag = false;
    
    bool containsKey(char ch){
        return link[ch - 'a']!=NULL;
    }
    Node* get(char ch)
    {
        return link[ch - 'a'];
    }
    
    void put(char ch,Node* node){
        link[ch -'a']= node;
    }
    
    void setEnd()
    {
        flag = true;
    }
    
    bool isEnd(){
        return flag;
    }
    
};

int countDistinctSubstring(string& s){
    int count = 0;
    Node* root = new Node();
    int n = s.length();
    
    for(int i = 0;i<n;i++)
    { Node* node = root;
        for(int j = i;j<n;j++)
        {
            if(!node->containsKey(s[j]))
            {
                count++;
                node->put(s[j],new Node());
            }
            node= node->get(s[j]);
        }
        
    }
    return count+1;
}

int main(){
    string s= "striver";
    cout<<"count :"<<countDistinctSubstring(s);
    return 0;
}
