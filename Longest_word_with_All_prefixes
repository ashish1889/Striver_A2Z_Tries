//https://www.youtube.com/watch?v=AWnBa91lThI&list=PLgUwDviBIf0pcIDCZnxhv0LkHf5KzG9zp&index=4

#include <iostream>
#include<vector>
using namespace std;

struct Node{
    Node* link[26];
    bool flag = false;
    void put(char ch,Node* node){
        link[ch - 'a']=node;
    }
    Node* get(char ch){
        return link[ch - 'a'];
    }
    bool containsKey(char ch){
        return link[ch - 'a']!=NULL;
    }
    void setEnd()
    {
        flag = true;
    }
    bool isEnd(){
        return flag;
    }
};

class Trie{
    private:
    Node* root;
    public:
    
    Trie(){
        root = new Node();
    }
    
    void insert(string word)
    {   Node* node = root;
        for(int i = 0;i<word.length();i++)
        {
            if(!node->containsKey(word[i]))
            {
                node->put(word[i],new Node());
            }
            node = node->get(word[i]);
            
            
        }
        node->setEnd();
    }
    
    bool checkIfAllPrefixExist(string word){
        Node* node = root;
        bool flag = true;
        for(int i = 0;i<word.length();i++)
        {
            if(node->containsKey(word[i]))
            {
                node = node->get(word[i]);
                flag = flag & node->isEnd();
            }
            else{
                return false;
            }
            
            
        }
        return flag;
        
    }
    
};

string completeString(vector<string> &a){
    Trie* obj = new Trie();
    for(auto word: a)
        obj->insert(word);
    
    string longest ="";
    for(auto word: a){
        if(obj->checkIfAllPrefixExist(word))
        {
            if(word.length()>longest.length()){
                longest = word;
            } else if(word.length()==longest.length() && word < longest){
                longest = word;
            }
                
            
        }
        
    }
    
    if(longest =="") return "None";
        return longest;
    
}

int main()
{
    //std::cout<<"Hello World";
    vector<string> list;
    list.push_back("n");
    list.push_back("ninja");
    list.push_back("ninj");
    list.push_back("ni");
    list.push_back("nin");
    list.push_back("ninga");
    cout<<completeString(list);

    return 0;
}

// O/p-
ninja
